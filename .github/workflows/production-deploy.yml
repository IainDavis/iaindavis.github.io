name: Deploy to Production

on:
  push:
    branches:
      - main

concurrency:
  group: production  # Use the PR number to uniquely identify the group
  cancel-in-progress: true 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-production-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install

      - name: Create Unit Test Report Directory
        run: mkdir -p static/reports/unittest

      - name: Generate Coverage Report
        run: |
          npx vitest run \
          --coverage \
          --coverage.dir=static/reports/coverage

      - name: Generate Pretty Unit Test Report
        run: |
          npx xunit-viewer \
          --results=static/reports/test-results.xml \
          --output=static/reports/unittest/index.html

      # files in 'static' moved to 'build', global styles file generated and staged in Storybook assets
      - name: Build Docusaurus
        run: yarn build

      # Stage directly in 'build' directory so we don't have to repeat the Docusaurus build
      - name: Build Storybook
        run: |
          NODE_ENV=production \
          npx storybook build \
          -o build/storybook/iaindavis.dev \
          --quiet

      - name: Deploy to GitHub Pages Production
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          publish_branch: gh-pages
          destination_dir: ""
      
      - name: Notify deployment status
        run: |
          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            curl -s -X POST \
              -o /dev/null \
              -w "%{http_code}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "state": "success",
                "description": "Production environment deployed successfully",
                "context": "Production Deployment",
                "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
          else
            curl -s -X POST \
              -o /dev/null \
              -w "%{http_code}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "state": "failure",
                "description": "Production environment deployment failed",
                "context": "Production Deployment",
                "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }' \
              https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
          fi


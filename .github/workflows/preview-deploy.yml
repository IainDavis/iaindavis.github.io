name: Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  # Job for building and deploying the preview
  build:
    runs-on: ubuntu-latest
    env:
      BASE_URL: "./pr-${{ github.event.number }}"
    # Skip the build on 'closed' events, or if the PR is already merged
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Yarn dependencies
      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Step 3: Set up Node.js (adjust the version as necessary)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 4: Install dependencies using Yarn
      - name: Install dependencies
        run: yarn install

      # Step 5: Build Docusaurus
      - name: Build Docusaurus
        run: yarn build
        env:
          BASE_URL: "/preview.iaindavis.github.io/pr-${{ github.event.number }}"

      # Step 6: Build the storybook
      - name: Build Storybook
        run: npx storybook build -o $BASE_URL/static/storybook/iaindavis.dev

      # Step 7: Generate Test Reports
      - name: Generate Test Reports
        # run: yarn test:vitest-reports

        run: mkdir -p $BASE_URL/static/reports/unittest; npx vitest run --coverage --coverage.dir=$BASE_URL/static/reports/coverage; npx xunit-viewer --results=./static/reports/test-results.xml --output=$BASE_URL/static/reports/unittest/index.html

        # Do not fail build if tests fail, just generate the reports
        continue-on-error: true        

      # Step 5: Build Docusaurus
      - name: Build Docusaurus
        run: yarn build
        env:
          BASE_URL: "/preview.iaindavis.github.io/pr-${{ github.event.number }}"

      # Step 8: Deploy to preview repository (preview.iaindavis.github.io)
      - name: Deploy to GitHub Pages Preview
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.PREVIEW_DEPLOY_PERSONAL_ACCESS_TOKEN }}
          publish_dir: ./build  # The directory where the static files are output
          destination_dir: pr-${{ github.event.number }}  # Subdirectory for this PR
          external_repository: IainDavis/preview.iaindavis.github.io  # Replace 'username' with your GitHub username

      # Step 9: Post the preview URL with curl (Create or update status check)
      - name: Create or update status check with curl
        continue-on-error: true  # Do not fail the entire build if this step fails
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.PREVIEW_DEPLOY_PERSONAL_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "state": "success",
              "description": "Preview environment is ready",
              "context": "Preview Environment for PR ${{ github.event.number }}",
              "target_url": "https://IainDavis.github.io/preview.iaindavis.github.io/pr-${{ github.event.number }}"
            }' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }}

  # Job for cleaning up after PRs are merged or closed
  cleanup:
    runs-on: ubuntu-latest
    # Only trigger cleanup when PR is merged or closed
    if: ${{ github.event.pull_request.merged == true || github.event.pull_request.state == 'closed' }}

    steps:
      # Step 1: Checkout the preview repository (preview.iaindavis.github.io)
      - name: Checkout preview repository
        uses: actions/checkout@v3
        with:
          repository: IainDavis/preview.iaindavis.github.io  # Replace 'username' with your GitHub username
          ref: gh-pages  # Target the gh-pages branch

      # Step 2: Remove the directory for the closed/merged PR
      - name: Remove preview directory
        run: |
          git rm -r pr-${{ github.event.number }}  # Remove the PR's preview directory
          git commit -m "Remove preview for PR #${{ github.event.number }}"  # Commit the change
          git push  # Push the change to the gh-pages branch

      # Step 3: Post the removal status with curl (Update status check)
      - name: Update status check to indicate preview removal
        continue-on-error: true  # Do not fail the entire build if this step fails
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.PREVIEW_DEPLOY_PERSONAL_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "state": "failure",
              "description": "Preview environment has been removed",
              "context": "Preview Environment for PR ${{ github.event.number }}",
              "target_url": "https://IainDavis.github.io/preview.iaindavis.github.io/pr-${{ github.event.number }}"
            }' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }}
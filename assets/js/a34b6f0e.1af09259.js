"use strict";(self.webpackChunkiaindavis_dev=self.webpackChunkiaindavis_dev||[]).push([[8748],{28453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>r});var o=a(96540);const n={},i=o.createContext(n);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(i.Provider,{value:t},e.children)}},42687:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/06/17/2025-06-17-why-i-backed-away-from-githooks/why-i-backed-away-from-githooks","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-06-17-why-i-backed-away-from-githooks/2025-06-17-why-i-backed-away-from-githooks.mdx","source":"@site/blog/2025-06-17-why-i-backed-away-from-githooks/2025-06-17-why-i-backed-away-from-githooks.mdx","title":"Why We Abandoned Git Hooks for Quality Gating (and What We Use Instead)","description":"A summary of our light-on-git-hooks strategy for vetting and accepting code changes, and how we arrived at it. We aim to maximize developer autonomy and freedom in the local environment and feature branches with advisory-only checks, while using the PR as the sole blocking quality-gate. We also rely on squash-and-merge to ensure that trunk branches (`develop` and `main`) are a series of vetted states only.","date":"2025-06-17T10:07:00.000Z","tags":[{"inline":false,"label":"Automation","permalink":"/blog/tags/automation","description":"Posts having to do with automating tasks"}],"readingTime":7.7,"hasTruncateMarker":true,"authors":[{"name":"Iain Davis","title":"Software Engineer, Principal @ IainDavis.dev","url":"https://iaindavis.dev","email":"iain@iaindavis.dev","page":{"permalink":"/blog/authors/iain"},"socials":{"github":"https://github.com/IainDavis","linkedin":"https://www.linkedin.com/in/iaindavis-dev/","stackoverflow":"https://stackoverflow.com/users/11380293/iaindavis-dev","reddit":"https://www.reddit.com/user/IainDavis-dev/"},"imageURL":"/img/authors/idavis.jpg","key":"iain"}],"frontMatter":{"title":"Why We Abandoned Git Hooks for Quality Gating (and What We Use Instead)","description":"A summary of our light-on-git-hooks strategy for vetting and accepting code changes, and how we arrived at it. We aim to maximize developer autonomy and freedom in the local environment and feature branches with advisory-only checks, while using the PR as the sole blocking quality-gate. We also rely on squash-and-merge to ensure that trunk branches (`develop` and `main`) are a series of vetted states only.","date":"2025-06-17T10:07","tags":["automation"],"authors":["iain"]},"unlisted":false,"nextItem":{"title":"Shared Diagram Assets Library","permalink":"/blog/2025/06/12/2025-06-12-shared-diagram-assets/shared-diagram-assets"}}')},89449:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var o=a(42687),n=a(74848),i=a(28453);const s={title:"Why We Abandoned Git Hooks for Quality Gating (and What We Use Instead)",description:"A summary of our light-on-git-hooks strategy for vetting and accepting code changes, and how we arrived at it. We aim to maximize developer autonomy and freedom in the local environment and feature branches with advisory-only checks, while using the PR as the sole blocking quality-gate. We also rely on squash-and-merge to ensure that trunk branches (`develop` and `main`) are a series of vetted states only.",date:"2025-06-17T10:07",tags:["automation"],authors:["iain"]},r=void 0,d={authorsImageUrls:[void 0]},h=[];function l(e){const t={admonition:"admonition",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.admonition,{title:"TL;DR",type:"note",children:s.description}),"\n",(0,n.jsx)(t.p,{children:"I set out last week to begin the work of creating an automated release process for Docodylus. At first, I thought I'd end up with something similar to what's used at Intuit, which isn't a defined standard or anything, but does tend to come as sort of variations on a theme. My goal was more or less to decide how to learn how to implement an existing process, and adjust it for the needs of my project. That remains true, but the needs of my project seem to be best served by a strategy of abandoning git hooks, almost entirely."})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);